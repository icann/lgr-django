from .default import *

# Template for deployment configuration
# Contains sensible default for production use

DEBUG = False

# TODO: Set this list to hosts/domains served by this app
# See https://docs.djangoproject.com/en/5.2/ref/settings/#std:setting-ALLOWED_HOSTS
ALLOWED_HOSTS = []

# Uncomment if you are not using HTTPS
#SESSION_COOKIE_SECURE = False
#CSRF_COOKIE_SECURE = False

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR + '/prod.db',
    }
}
# Configure file handler to output logs to specific file location
LOGGING['handlers']['file'] = {'level': 'DEBUG', 'class': 'logging.FileHandler', 'filename': '/var/log/lgr/lgr-django.log', 'formatter': 'default'}
LOGGING['handlers']['celery-file'] = {'level': 'DEBUG', 'class': 'logging.FileHandler', 'filename': '/var/log/lgr/lgr-celery.log', 'formatter': 'default'}

# Set handler for modules
LOGGING['loggers']['celery']['handlers'] += ['celery-file']
for mod in ['django.request', 'lgr_web', 'lgr_auth', 'lgr_advanced', 'lgr_advanced.lgr_editor',
            'lgr_advanced.lgr_tools', 'lgr_basic', 'lgr_idn_table_review', 'lgr_session', 'lgr']:
	    LOGGING['loggers'][mod]['handlers'] += ['file']


##### e-mail settings #####
# The host for the use of sending email (default: localhost)
#EMAIL_HOST = 'localhost'

# Port to use for the SMTP server defined above (default: 25)
#EMAIL_PORT = 25

# Username to use for the SMTP server defined in EMAIL_HOST
#EMAIL_HOST_USER

# Password to use for the SMTP server defined in EMAIL_HOST
#EMAIL_HOST_PASSWORD

# Whether to use a TLS (secure) connection when talking to the SMTP server
#EMAIL_USE_TLS = True
# Whether to use an implicit TLS (secure) connection when talking to the SMTP server
#EMAIL_USE_SSL = True

# Default email address to use (default: 'webmaster@localhost')
#DEFAULT_FROM_EMAIL = 'support@viagenie.ca'
##### /e-mail settings #####

##### LGR Toolset Project-specific settings #####

SUPPORTED_UNICODE_VERSION = '16.0.0'
DEFAULT_UNICODE_VERSION = '16.0.0'
METADATA_UNICODE_VERSIONS = (
    '6.3.0',
    '6.0.0',
    '6.1.0',
    '6.2.0',
    '7.0.0',
    '8.0.0',
    '9.0.0',
    '10.0.0',
    '11.0.0',
    '12.0.0',
    '12.0.0',
    '14.0.0',
    '15.1.0',
    '16.0.0',
)

# UNICODE_DATABASES tells munidata how to instantiate the implementation of each Unicode version that we support.
# Keys are the Unicode version, like '6.3.0'
# Values are a dict of the kwargs to pass to the munidata.manager.register function along with the version.
# Currently, we assume that the underlying implementation is "picu", so the value should have the following keys:
# - icu_uc_lib: full path to the libicuuc.so file
# - icu_i18n_lib: full path to the libicui18n.so file
# - version_tag: version tag used in the function symbols in the above libraries (usually the ICU major version)
# See picu.loader.KNOWN_ICU_VERSIONS

UNICODE_DATABASES = {
    '16.0.0': {
        'icu_uc_lib': '/usr/local/lib/libicuuc.so.76',
        'icu_i18n_lib': '/usr/local/lib/libicui18n.so.76',
        'version_tag': 76,
    }
}

##### /LGR Toolset Project-specific settings #####

# DELETE_FROM_HERE_AFTER_GENERATION
if SECRET_KEY == 'PLEASE GENERATE ONE':
    import os
    thisfile = __file__[:-1] if __file__.endswith('pyc') else __file__
    path = os.path.join(os.path.dirname(thisfile), '..', '..', '..', 'bin', 'gen_secret_key')
    exec(open(path).read())
    secret_key = write_secret_key(thisfile) # overwrite me
    SECRET_KEY = secret_key
# DELETE_TO_HERE_AFTER_GENERATION
