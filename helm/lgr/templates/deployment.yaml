{{- range .Values.microservices }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $.Release.Name }}-{{ .name }}-{{ template "lgr.region" $.Values }}{{ $.Values.env }}
  namespace: {{ $.Values.namespace }}
  labels:
    app: {{ $.Values.app }}
    env: {{ $.Values.env }}
spec:
  replicas: {{ .replicaCount }}
  revisionHistoryLimit: {{ $.Values.historyLimit }}
  selector:
    matchLabels:
      app: {{ $.Values.app }}
      srv: {{ .name }}
      env: {{ $.Values.env }}
  template:
    metadata:
      labels:
        app: {{ $.Values.app }}
        srv: {{ .name }}
        env: {{ $.Values.env }}
    spec:
      {{- if .volume }}
      volumes:
        - name: {{ $.Values.volume.storage.name }}
          hostPath:
            path: {{ $.Values.volume.storage.remotePath }}
      {{- end }}
      serviceAccountName: {{ $.Values.serviceAccount }}
      containers:
        - image: {{ $.Values.repoPath }}/{{ .image }}:{{ $.Values.repoVer }}
          name:  {{ .name }}
          {{- if .args }}
          args:
          {{- end }}
          {{- range .args }}
            - {{ . | quote }}
          {{- end }}
          envFrom:
            - configMapRef:
                name: {{ $.Release.Name }}-{{ template "lgr.region" $.Values }}{{ $.Values.env }}
            - secretRef:
                name: lgrsecrets-sealed-{{ $.Values.env }}
          imagePullPolicy: Always
          {{- if .web }}
          ports:
            - containerPort: {{ .web.port }}
              name:  {{ .name }}
          {{- end }}
          resources:
            limits:
              cpu: {{ .resources.limits.cpu | quote }}
              memory: {{ .resources.limits.memory }}
            requests:
              cpu: {{ .resources.requests.cpu | quote }}
              memory: {{ .resources.requests.memory }}
          {{- if .volume }}
          volumeMounts:
            - name: {{ $.Values.volume.storage.name }}
              mountPath: {{ $.Values.volume.storage.localPath }}
              readOnly: false
          # So that the pod can access the nfs shared volumes
          {{- end }}
          securityContext:
            runAsUser: {{ .uid }}
            runAsGroup: {{ .gid }}
        {{- if .smtp }}
        - env:
          {{- with $.Values.smtp }}
              - name: ICANNENVIRONMENT
              {{- if eq $.Values.env "prod" }}
                value: production
              {{- else }}
                value: {{ $.Values.env }}
              - name: ICANN_EMAIL_INTERCEPT
                value: {{ .email }}
              {{- end  }}
          image: {{ .image }}
          imagePullPolicy: Always
          livenessProbe:
            tcpSocket:
              port: {{ .port }}
          name: {{ .name }}
          readinessProbe:
            tcpSocket:
              port: {{ .port }}
          resources:
            limits:
              cpu: {{ .resources.limits.cpu }}
              memory: {{ .resources.limits.memory }}
            requests:
              cpu: {{ .resources.requests.cpu }}
              memory: {{ .resources.requests.memory }}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          {{- end }}
        {{- end }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      {{- if eq $.Values.cluster "k8" }}
      nodeSelector:
        node-role.kubernetes.io/node: 'true'
        nodetype: 'worker'
      imagePullSecrets:
        - name: registrykey-webcluster
      {{- end }}
{{- end }}
